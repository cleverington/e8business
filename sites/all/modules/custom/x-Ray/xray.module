<?php
  /**
   *     @file
   *  Helps site builders and module developers investigate a site.
   *
   */

  /*
   *
   *  Implements hook_form_alter() to show each form's identifier.
   *  Secondary, implements the debug function.
   */
  function xray_form_alter(&$form, &$form_state, $form_id) {
    $form['xray_display_form_id'] = array(
      '#type' => 'item',
      '#title' => t('Internal Form ID'),
      '#markup' => $form_id,
      '#theme-attributes' => array('container__xray__form'),
      '#attributes' => array('class' => array('xray')),
      '#weight' => -100,
    );
  }
  /**
   *
   * Implements hook_help()
   *
   */
  function xray_help($path, $arg) {
    if ($path == 'admin/structure') {
      return t('This site has stuff!');
    }
    switch ($path) {
        case 'admin/appearance':
            return _xray_help_admin_appearance();
    }
  }
    /**
   *
   * Fetch information about themes
   *
   */
  function xray_stats_enabled_themes() {
    $themes = list_themes();
    $num_themes = count($themes);
    //Initialize variables for the data you will collect.
    $num_hidden = 0; //Number of hidden themes.
    $num_enabled = 0;
    $summaries = array();
    //Iterate through each theme, gathering data that you care about.
    foreach ($themes as $themename => $theme) {
        // Do not gather statistics for hidden themes, but keep a count of them.
        if (isset($theme->info['hidden']) && $theme->info['hidden']) {
            $num_hidden++;
        }
        else { //This is a visible theme.
            if ($theme->status) {
                $num_enabled++;
                //This is an enabled theme, provide more stats.
                $summaries[$theme->info['name']] = array(
                    'regions' => count($theme->info['regions']),
                    'overlay_regions' => count($theme->info['overlay_regions']),
                    'regions_hidden' => count($theme->info['overlay_regions']),
                    'features' => count($theme->info['features']),
                    'kindsofstylesheets' => count($theme->info['stylesheets']),
                    'allstylesheets' => isset($theme->info['stylesheets']['all']) ? count($theme->info['stylesheets']['all']) : 0
                );
            }
        }
    }
  }
    
    /**
   *
   * Help text for the admin/appearance page.
   *
   */
  function _xray_help_admin_appearance() {
    $output = '';
    $data = xray_stats_enabled_themes();
    $output .= format_plural(
        $data['num_hidden'],
        'There is one hidden theme.',
        'There are @count hidden themes.'        
    );
    return theme('xray_help', array('text' => $output));
  }
    /**
   *
   * Implements hook_menu for xray.module
   *
   */
    function xray_menu() {
        $items = array();
        // Create xray Overview page on admin/reports
        $items['admin/reports/xray'] = array(
            'title' => 'X-ray technical site overview',
            'description' => 'See the internal structure of this site.',
            'page callback' => 'xray_overview_page',
            'access callback' => TRUE,
        );
        $items['admin/reports/xray/overview'] = array(
            'title' => 'Overview',
            'description' => "Technical overview of the site's internals.",
            'type' => MENU_DEFAULT_LOCAL_TASK,
            'weight' => -10,
        );
        // Set permissions
        $items['admin/reports/xray/permissions'] = array (
            'title' => 'Permissions',
            'page callback' => 'xray_permission_names_page',
            'type' => MENU_LOCAL_TASK,
            'weight' => 10,
            'access arguments' => array('access site reports'),
        );
        return $items;    
    }
    
    /**
     *
     * Implements function for xray_menu
     *
     */
    function xray_overview_page() {
        return 'test';
    }
    
    /**
     *
     * Display the X-ray permission names page.
     *
     */
    function xray_permission_names_page() {
        $names = xray_permission_names();
        return theme('xray_permission_names', array('names' => $names));
    }
    
    /**
     *
     * Collect permission names.
     *
     */
    function xray_permission_names() {
        $names = array();
        $permissions = module_invoke_all('permission');
        // Extract just the permission title from each permission array.
        foreach ($permissions as $machine_name => $permission) {
            $names[$machine_name] = $permission['title'];
        }
        // Put permission names in alphabetical order by title.
        asort($names);
        return $names;
    }
    
    /**
     *
     * Returns HTML of permission machine and display ames in a table.
     *
     * @param $variables
     * An associative array containing:
     * - names: Array of human-readable names keyed by machine names.
     *
     * @ingroup themeable
     *
     */
    function theme_xray_permission_names($variables) {
        $names = $variables['names'];
        $output = '';
        $header = array(t('Permission title'), t*('Permission machine name'));
        $rows = array();
        foreach ($names as $machine_name => $title) {
            $rows[] = array($title, $machine_name);
        }
        $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'xray-permission-names')));
        return $output;
    }
    
    /**
     *
     * Implements hook_theme().
     *
     */
    function xray_theme() {
        return array(
            'xray_permission_names' => array(
                'render element' => 'names',
            ),
        );
    }
    
    